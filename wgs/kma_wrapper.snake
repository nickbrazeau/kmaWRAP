#! /usr/bin/env python3

import os
import sys
import yaml
import re

def load_run_metadata(f):
	""" Get run metadata from tab-separated file."""
	samples = list()
	with open(f) as rfile:
		for line in rfile:
			if line.startswith("#"):
				continue
			line = line.strip().split("\t")
			samples.append(line[0])

	return samples

## read metadata, and get samples
samples = load_run_metadata(config["smpls"])

# global configs
SEQROOT = config["fastq"]
SCRROOT = config["scratch"]

## set final target
final_target = [ os.path.join(SCRROOT, "{}.kmalog".format(s)) for s in samples ]

rule all:
	input: final_target


# kma algorithm from
# Note, flags are: https://bitbucket.org/genomicepidemiology/kma/src/master/
rule run_kma:
	input:
		trimmedread1 =  os.path.join(SCRROOT, "intermedfastq", "{sample}_R1.trimmed.fastq.gz"),
		trimmedread2 =  os.path.join(SCRROOT, "intermedfastq", "{sample}_R2.trimmed.fastq.gz")
	params:
		identity = config["perc_identity"],
		database = config["indexeddatabase"],
		out = os.path.join(SCRROOT, "{sample}")
	output:
		kmalog = os.path.join(SCRROOT, "{sample}.kmalog")
	shell:
		r"""
		kma -bc90 -1t1 \
		-ID {params.identity} \
		-t_db {params.database} \
		-int {input.trimmedread1} {input.trimmedread2} \
		-o {params.out} \
		2> {output.kmalog}
		"""

# First tream reads through cutadapt and trim based on primer seq
# 		For flag specifics, see:
#			http://cutadapt.readthedocs.io/en/stable/guide.html#removing-adapters
#			https://support.illumina.com/bulletins/2016/12/what-sequences-do-i-use-for-adapter-trimming.html
rule trim_and_align:
	input:
		read1 = os.path.join(SEQROOT, "{sample}_R1.fastq.gz"),
		read2 = os.path.join(SEQROOT, "{sample}_R2.fastq.gz"),
		adapters = config["ADAPTERS"],
	output:
		cuttrimlog = os.path.join(SCRROOT, "intermedfastq", "{sample}_trimming.log"),
		trimmedread1 =  os.path.join(SCRROOT, "intermedfastq", "{sample}_R1.trimmed.fastq.gz"),
		trimmedread2 =  os.path.join(SCRROOT, "intermedfastq", "{sample}_R2.trimmed.fastq.gz")
	params:
		cutminlength = config["cutmin_trimmed_length"]
	shell:
		r"""
		cutadapt --interleaved \
			-a file:{input.adapters} \
			-A file:{input.adapters} \
			-m {params.cutminlength} \
			{input.read1} {input.read2} \
			-o {output.trimmedread1} \
			-p {output.trimmedread2}
			2>{output.cuttrimlog}
		"""

# note, --interleaved flag uses both interleaved input and output
