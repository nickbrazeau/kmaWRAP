#! /usr/bin/env python3

import os
import sys
import yaml
import re

def load_run_metadata(f):
	""" Get run metadata from tab-separated file."""
	samples = list()
	with open(f) as rfile:
		for line in rfile:
			if line.startswith("#"):
				continue
			line = line.strip().split("\t")
			samples.append(line[0])

	return samples

## read metadata, and get samples
samples = load_run_metadata(config["smpls"])

# global configs
SEQROOT = config["fastq"]
SCRROOT = config["scratch"]

## set final target
final_target = [ os.path.join(SCRROOT, "{}_kma_results".format(s), "{}.kmalog".format(s)) for s in samples ]

rule all:
	input: final_target


# kma algorithm from
# Note, flags are: https://bitbucket.org/genomicepidemiology/kma/src/master/
rule run_kma:
	input:
		smplmergecut = os.path.join(SCRROOT, "{sample}.trimmed.merged.fastq.gz")
	params:
		identity = config["perc_identity"],
		database = config["indexeddatabase"],
		out = os.path.join(SCRROOT, "{sample}")
	output:
		kmalog = os.path.join(SCRROOT, "{sample}_kma_results", "{sample}.kmalog")
	shell:
		r"""
		kma -int -bc90 -1t1 \
		-ID {params.identity} \
		-t_db {params.database} \
		{input.smplmergecut} \
		-o {params.out} \
		2> {output.kmalog}
		"""


rule stitch_trimmed:
	input:
		trimmed =  os.path.join(SCRROOT, "{sample}.trimmed.fastq.gz")
	params:
		stitchminoverlap = config["stitch_min_overlap"],
		stitchmaxoverlap = config["stitch_max_overlap"]
	output:
		flashstitchlog =  os.path.join(SCRROOT, "{sample}_stitching.log"),
		smplmergecut = os.path.join(SCRROOT, "{sample}.trimmed.merged.fastq.gz")
	shell:
		r"""
		flash --interleaved \
			--min-overlap {params.stitchminoverlap}
			--max-overlap {params.stitchmaxoverlap}
			--to-stdout \
			{input.trimmed} \
			2>{output.flashstitchlog} | \
			gzip -c > {output.smplmergecut}
		"""

# First tream reads through cutadapt and trim based on primer seq
# 		For flag specifics, see:
#			http://cutadapt.readthedocs.io/en/stable/guide.html#removing-adapters
#       For why we chose this schematic: https://benjjneb.github.io/dada2/ITS_workflow.html

rule trim_and_align:
	input:
		read1 = os.path.join(SEQROOT, "{sample}_R1.fastq.gz"),
		read2 = os.path.join(SEQROOT, "{sample}_R2.fastq.gz"),
		Fwd = config["Forward"],
		FwdRC = config["ForwardReverseComplement"],
		Rev = config["Reverse"],
		RevRC = config["ReverseReverseComplement"]
	output:
		cuttrimlog = os.path.join(SCRROOT, "{sample}_trimming.log"),
		trimmed =  os.path.join(SCRROOT, "{sample}.trimmed.fastq.gz"),
	params:
		cutminlength = config["cutmin_trimmed_length"]
	shell:
		r"""
		cutadapt --interleaved \
			-g file:{input.Fwd} \
			-a file:{input.RevRC} \
			-G file:{input.Rev} \
			-A file:{input.FwdRC} \
			-m {params.cutminlength} \
			{input.read1} {input.read2} \
			2>{output.cuttrimlog} | \
			gzip -c {output.trimmed}
		"""

# note, --interleaved flag uses both interleaved input and output
